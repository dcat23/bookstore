package com.metie.bookstore;

//import com.metie.bookstore.entity.Author;
import com.metie.bookstore.entity.Book;
//import com.metie.bookstore.repository.AuthorRepository;
import com.metie.bookstore.repository.BookRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.util.Arrays;
import java.util.List;

@SpringBootApplication
public class BookstoreApplication implements CommandLineRunner{

	@Autowired
	private BookRepository bookRepository;


//	@Autowired
//	private AuthorRepository authorRepository;
	private static final Logger logger = LoggerFactory.getLogger(BookstoreApplication.class);
	public static void main(String[] args) {

		//What is RESTFUL API
		SpringApplication.run(BookstoreApplication.class, args);
		logger.info("Application Started");
		logger.error("An Error Example");
		logger.trace("A Trace Example");
		logger.warn("A warning!!!!!");
	}

@Override
public void run(String... args) throws Exception {
	//when you run the program the Hibernate section create the three cars.
	bookRepository.saveAll(Arrays.asList(
			new Book("miracle" , "ei879",99.93),
			new Book("molly" , "87879",34.93),
			new Book("my Life" , "yi879",78.93),
			new Book("something else" , "e0879",23.93)
	));
	//The findAll method from JPA will retrieve everything from the selected table and store it into a list

	// Using the Stream API method forEach of it and loop it through the logger.info
	// Change BookList to bookList
	List<Book> bookList = bookRepository.findAll();
// Using the Stream API method forEach of it and loop it through the logger.info
	bookList.forEach(x -> logger.info(x.toString()));

	// Here we are creating two owners storing one in an Owner variable as the save will return the owner including
	// the id generated by the Database.
//	Author authorOptional = authorRepository.save(new Author("Metie Edessa", "VA"));
//	authorRepository.save(new Author("Metie Edessa", "VA"));
	//Here we create a new car plugging in the owner into the constructor linking the Author to the Book
//	Book book = new Book("Horse", "93830",35.00, authorOptional);
	// Saving the singular car to the DB
//	bookRepository.save(book);
	// Using the Stream API method forEach of it and loop it through the logger.info also showing the Owner
	bookRepository.findAll().forEach(x -> logger.info(x.toString()));

}
	}